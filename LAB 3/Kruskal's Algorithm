#include <stdio.h>
#include <stdlib.h>

struct Edge {
    int src, dest, weight;
};

int *parent;

int find(int i) {
    while (i != parent[i])
        i = parent[i];
    return i;
}

void unionSet(int x, int y) {
    int xset = find(x);
    int yset = find(y);
    parent[xset] = yset;
}

int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

int main() {
    int V, E, totalWeight = 0;

    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    struct Edge edges[E];
    parent = (int*)malloc(V * sizeof(int));

    printf("Enter the source edge, destination edge and the weight:\n");
    for (int i = 0; i < E; i++)
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);

    for (int i = 0; i < V; i++)
        parent[i] = i;

    qsort(edges, E, sizeof(edges[0]), compare);

    printf("Edges in the MST:\n");
    for (int i = 0, e = 0; e < V - 1 && i < E; i++) {
        int x = find(edges[i].src);
        int y = find(edges[i].dest);

        if (x != y) {
            printf("%d - %d\t%d\n", edges[i].src, edges[i].dest, edges[i].weight);
            unionSet(x, y);
            totalWeight += edges[i].weight;
            e++;
        }
    }

    printf("Total weight of MST: %d\n", totalWeight);

    free(parent);
    return 0;
}
